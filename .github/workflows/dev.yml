name: Development env

env:                                      
  DEV_REPOSITORY: python-app-dev       
  IMAGE_TAG: "${{ github.sha }}"

on:
  push:
    branches:
      - dev
    paths-ignore:
      - '.github/workflows/**'
      - '.git'
      - 'README.md'
  
jobs: 
  test:
    name: Test
    runs-on: ubuntu-latest 
    strategy:
      matrix:
        python: [3.6, 3.9]
    defaults:
      run: 
        working-directory: python-app
    steps:
    
     - name: Checkout
       uses: actions/checkout@v2

     - name: Install Python ${{ matrix.python }}
       uses: actions/setup-python@v2
       with:
         python-version: ${{ matrix.python }}
     
     - name: Install requirements
       run: |
         python -m pip install --upgrade pip
         pip install mypy pylint
         pip install -r requirements.txt

     - name: Install Snyk
       uses: snyk/actions/setup@master
    
     - name: Run mypy
       run: mypy --ignore-missing-imports . 

     - name: Run pylint
       run: pylint main.py

     - name: Run Snyk test
       run: snyk test --file=requirements.txt --command=python3
       env:
         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    
     - name: Run Snyk code test
       run: snyk code test .
       env:
         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build_dev:
    name: Build Dev
    runs-on: ubuntu-latest
    needs: test
    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with: 
          repository: Sturmschwalbe84/infrastructure

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Create amazon ECR Repository
        id: ecr
        uses: int128/create-ecr-repository-action@v1
        with:
          repository: ${{ env.DEV_REPOSITORY }}
      
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          docker build ./python-app -t ${{ steps.ecr.outputs.repository-uri }}:${{ env.IMAGE_TAG }}
          docker push ${{ steps.ecr.outputs.repository-uri }}:${{ env.IMAGE_TAG }} 

  deploy_dev:
    name: Deploy Dev
    needs: build_dev
    environment:
      name: development
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Cluster/AWS/ECS_Dev
    steps:

     - name: Checkout
       uses: actions/checkout@v2
       with:
          repository: Sturmschwalbe84/infrastructure
     
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

     - name: Login to Amazon ECR
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v1
        
     - name: Get the name of the ECR repository
       id: ecr
       uses: int128/create-ecr-repository-action@v1
       with:
         repository: ${{ env.DEV_REPOSITORY }}
     
     - name: Setup Terraform
       uses: hashicorp/setup-terraform@v1

     - name: Terraform fmt
       id: fmt
       run: terraform fmt -check

     - name: Terraform Init
       id: init
       run: terraform init

     - name: Terraform Validate
       id: validate
       run: terraform validate -no-color

     - name: Terraform Apply
       id: apply
       run: terraform apply -var="Dev_Container=${{ steps.ecr.outputs.repository-uri }}:${{ env.IMAGE_TAG }}" -auto-approve