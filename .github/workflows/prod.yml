name: CD Workflow

env:                                      
  BLAU_REPOSITORY: python-app-blue
  GRUEN_REPOSITORY: python-app-green                
  IMAGE_TAG: "${{ github.sha }}"

on:
  push:
    branches:
      - main 
    paths-ignore:
      - '.github/workflows/**'
      - '.git'
      - '.gitignore'
      - 'README.md'
      
jobs:
  notification:
    name: Notification
    uses: Sturmschwalbe84/testing/.github/workflows/notifications.yml@main
    with: 
      message: "*${{ github.actor }}* pushed code to the main. Code is testing and building for *green* deployment.\n\n[Link to the action.](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
    secrets: 
      token: ${{ secrets.TELEGRAM_TOKEN }}
      to: ${{ secrets.TELEGRAM_TO }}
  
  test:
    name: Tests
    runs-on: ubuntu-latest 
    strategy:
      matrix:
        python: [3.6, 3.9]
    defaults:
      run: 
        working-directory: python-app
    steps:
     - name: Checkout
       uses: actions/checkout@v2
     - name: Install Python ${{ matrix.python }}
       uses: actions/setup-python@v2
       with:
         python-version: ${{ matrix.python }}
     - name: Install requirements
       run: |
         python -m pip install --upgrade pip
         pip install mypy pylint
         pip install -r requirements.txt
     - name: Install Snyk
       uses: snyk/actions/setup@master
     - name: Run mypy
       run: mypy --ignore-missing-imports . 
     - name: Run pylint
       run: pylint main.py
     - name: Run Snyk test
       run: snyk test --file=requirements.txt --command=python3
       env:
         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
     - name: Run Snyk code test
       run: snyk code test .
       env:
         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  
# =========================================== STAGING ==================================================

  build_gruen:
    name: Build Gruen
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Create Amazon ECR Repository
        id: ecr
        uses: int128/create-ecr-repository-action@v1
        with:
          repository: ${{ env.GRUEN_REPOSITORY }}
          lifecycle-policy: Policy/green_policy.json
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          docker build ./python-app -t ${{ steps.ecr.outputs.repository-uri }}:${{ env.IMAGE_TAG }}
          docker push ${{ steps.ecr.outputs.repository-uri }}:${{ env.IMAGE_TAG }}    

  gruen_notification:
    name: Green request
    needs: build_gruen
    uses: Sturmschwalbe84/testing/.github/workflows/notifications.yml@main
    with: 
      message: "*${{ github.actor }}*'s code was builded and pushed to ECR. Waiting for your approval for *green* deployment.\n\n[Link to the action.](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
    secrets: 
      token: ${{ secrets.TELEGRAM_TOKEN }}
      to: ${{ secrets.TELEGRAM_TO }}

  deploy_gruen:
    name: Deploy Gruen
    needs:
     - gruen_notification
    runs-on: ubuntu-latest
    environment:
      name: staging
    defaults:
      run:
        working-directory: Cluster/AWS/ECS_Green
    steps:
     - name: Checkout
       uses: actions/checkout@v2
       with:
         repository: Sturmschwalbe84/infrastructure
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
     - name: Login to Amazon ECR
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v1       
     - name: Get the name of the ECR repository
       id: ecr
       uses: int128/create-ecr-repository-action@v1
       with:
         repository: ${{ env.GRUEN_REPOSITORY }}     
     - name: Setup Terraform
       uses: hashicorp/setup-terraform@v1
     - name: Terraform fmt
       id: fmt
       run: terraform fmt -check
     - name: Terraform Init
       id: init
       run: terraform init
     - name: Terraform Validate
       id: validate
       run: terraform validate -no-color
     - name: Terraform Apply
       id: apply
       run: terraform apply -var="Green_Container=${{ steps.ecr.outputs.repository-uri }}:${{ env.IMAGE_TAG }}" -auto-approve

  split_notification:
    name: Split request
    needs: deploy_gruen
    uses: Sturmschwalbe84/testing/.github/workflows/notifications.yml@main
    with: 
      message: "*${{ github.actor }}*'s code was deployed to the *green* environment. Waiting for your approval to *split* traffic.\n\n[Link to the action.](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
    secrets: 
      token: ${{ secrets.TELEGRAM_TOKEN }}
      to: ${{ secrets.TELEGRAM_TO }}

  split_traffic:
    name: Split Traffic
    needs: split_notification
    runs-on: ubuntu-latest
    environment:
      name: staging
    defaults:
      run:
        working-directory: Cluster/AWS/Instances
    steps:
     - name: Checkout
       uses: actions/checkout@v2
       with:
         repository: Sturmschwalbe84/infrastructure
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           aws-region: ${{ secrets.AWS_REGION }}  
     - name: Setup Terraform
       uses: hashicorp/setup-terraform@v1
     - name: Terraform fmt
       id: fmt
       run: terraform fmt -check
     - name: Terraform Init
       id: init
       run: terraform init
     - name: Terraform Validate
       id: validate
       run: terraform validate -no-color
     - name: Terraform traffic
       id: traffic
       run: terraform apply -var="Traffic=split" -auto-approve

# =========================================== PRODUCTION ==================================================

  build_blau:
    name: Build Blau
    runs-on: ubuntu-latest
    needs: split_traffic
    steps:
     - name: Checkout
       uses: actions/checkout@v2
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ secrets.AWS_REGION }}
     - name: Login to Amazon ECR
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v1        
     - name: Create Amazon ECR Repository
       id: ecr
       uses: int128/create-ecr-repository-action@v1
       with:
         repository: ${{ env.BLAU_REPOSITORY }}
         lifecycle-policy: Policy/blue_policy.json     
     - name: Build, tag, and push image to Amazon ECR
       id: build-image
       run: |
         docker build ./python-app -t ${{ steps.ecr.outputs.repository-uri }}:${{ env.IMAGE_TAG }}
         docker push ${{ steps.ecr.outputs.repository-uri }}:${{ env.IMAGE_TAG }}

  blau_notification:
    name: Blau request
    needs: build_blau
    uses: Sturmschwalbe84/testing/.github/workflows/notifications.yml@main
    with: 
      message: "*${{ github.actor }}*'s code was builded and pushed to ECR. Waiting for your approval for *BLUE* deployment.\n\n[Link to the action.](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
    secrets: 
      token: ${{ secrets.TELEGRAM_TOKEN }}
      to: ${{ secrets.TELEGRAM_TO }}

  deploy_blau:
    name: Deploy Blau
    needs: blau_notification
    environment:
      name: release
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Cluster/AWS/ECS_Blue
    steps:
     - name: Checkout
       uses: actions/checkout@v2
       with:
          repository: Sturmschwalbe84/infrastructure   
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
     - name: Login to Amazon ECR
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v1 
     - name: Get the name of the ECR repository
       id: ecr
       uses: int128/create-ecr-repository-action@v1
       with:
         repository: ${{ env.BLAU_REPOSITORY }}
     - name: Setup Terraform
       uses: hashicorp/setup-terraform@v1
     - name: Terraform fmt
       id: fmt
       run: terraform fmt -check
     - name: Terraform Init
       id: init
       run: terraform init
     - name: Terraform Validate
       id: validate
       run: terraform validate -no-color
     - name: Terraform Apply
       id: apply
       run: terraform apply -var="Blue_Container=${{ steps.ecr.outputs.repository-uri }}:${{ env.IMAGE_TAG }}" -auto-approve
